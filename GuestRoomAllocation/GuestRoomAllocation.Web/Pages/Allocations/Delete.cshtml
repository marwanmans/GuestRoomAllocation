@page "{id:int}"
@model DeleteAllocationModel
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@{
    ViewData["Title"] = "Delete Allocation";
}

<div class="row">
    <div class="col-md-8">
        <div class="card border-danger">
            <div class="card-header bg-danger text-white">
                <h5><i class="fas fa-exclamation-triangle"></i> Delete Room Allocation</h5>
            </div>
            <div class="card-body">
                <p class="lead">Are you sure you want to delete this room allocation?</p>

                <div class="row">
                    <div class="col-md-6">
                        <h6>Allocation Details:</h6>
                        <ul class="list-unstyled">
                            <li><strong>Guest:</strong> @Model.Allocation.Guest.FullName</li>
                            <li><strong>Room:</strong> @Model.Allocation.Room.Apartment.Name - @Model.Allocation.Room.RoomNumber</li>
                            <li><strong>Check-in:</strong> @Model.Allocation.CheckInDate.ToString("MMM dd, yyyy")</li>
                            <li><strong>Check-out:</strong> @Model.Allocation.CheckOutDate.ToString("MMM dd, yyyy")</li>
                            <li><strong>Duration:</strong> @Model.Allocation.Duration days</li>
                        </ul>
                    </div>
                    <div class="col-md-6">
                        <h6>Impact Assessment:</h6>
                        <ul class="list-unstyled">
                            <li>
                                <strong>Status:</strong>
                                @{
                                    var status = Model.GetAllocationStatus();
                                    var statusClass = status switch
                                    {
                                        "current" => "success",
                                        "upcoming" => "info",
                                        "past" => "secondary"
                                    };
                                }
                                <span class="badge bg-@statusClass">@status.ToUpper()</span>
                            </li>
                            <li><strong>Created:</strong> @Model.Allocation.CreatedDate.ToString("MMM dd, yyyy")</li>
                            @if (Model.Allocation.BathroomPreferenceOverride)
                            {
                                <li><strong>Special:</strong> <span class="badge bg-warning">Bathroom Override</span></li>
                            }
                            @if (!string.IsNullOrEmpty(Model.Allocation.Notes))
                            {
                                <li><strong>Notes:</strong> @Model.Allocation.Notes</li>
                            }
                        </ul>
                    </div>
                </div>

                @if (status == "current")
                {
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle"></i>
                        <strong>Warning:</strong> This guest is currently staying in the room.
                        Deleting this allocation will immediately free up the room.
                    </div>
                }
                else if (status == "upcoming")
                {
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle"></i>
                        <strong>Note:</strong> This is a future allocation that has not started yet.
                        The room will become available for the specified dates.
                    </div>
                }

                <form method="post" class="d-inline">
                    <input type="hidden" asp-for="Allocation.Id" />
                    <div class="d-flex justify-content-between mt-4">
                        <a href="/Allocations" class="btn btn-secondary">
                            <i class="fas fa-arrow-left"></i> Cancel
                        </a>
                        <button type="submit" class="btn btn-danger"
                                onclick="return confirm('@(status == "current" ? "This will immediately check out the current guest. Are you absolutely sure?" : "Are you sure you want to delete this allocation?")')">
                            <i class="fas fa-trash"></i> Delete Allocation
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <!-- Guest Information -->
        <div class="card mb-3">
            <div class="card-header">
                <h6><i class="fas fa-user"></i> Guest Information</h6>
            </div>
            <div class="card-body">
                <div class="text-center mb-3">
                    <h5>@Model.Allocation.Guest.FullName</h5>
                    @if (!string.IsNullOrEmpty(Model.Allocation.Guest.JobPosition))
                    {
                        <p class="text-muted">@Model.Allocation.Guest.JobPosition</p>
                    }
                </div>
                <div class="mb-2">
                    <small class="text-muted">
                        <i class="fas fa-envelope"></i> @Model.Allocation.Guest.Email
                    </small>
                </div>
                <div class="mb-2">
                    <small class="text-muted">
                        <i class="fas fa-phone"></i> @Model.Allocation.Guest.Phone
                    </small>
                </div>
                @if (!string.IsNullOrEmpty(Model.Allocation.Guest.Notes))
                {
                    <div class="mt-3">
                        <small>
                            <strong>Guest Notes:</strong><br>
                            @Model.Allocation.Guest.Notes
                        </small>
                    </div>
                }
            </div>
        </div>

        <!-- Room Information -->
        <div class="card">
            <div class="card-header">
                <h6><i class="fas fa-bed"></i> Room Information</h6>
            </div>
            <div class="card-body">
                <div class="mb-2">
                    <strong>@Model.Allocation.Room.Apartment.Name</strong>
                    <br><small class="text-muted">@Model.Allocation.Room.Apartment.Address</small>
                </div>
                <div class="mb-2">
                    <span class="badge bg-primary">Room @Model.Allocation.Room.RoomNumber</span>
                    @if (Model.Allocation.Room.HasPrivateBathroom)
                    {
                        <span class="badge bg-success">
                            <i class="fas fa-bath"></i> Private Bath
                        </span>
                    }
                    else
                    {
                        <span class="badge bg-secondary">
                            <i class="fas fa-bath"></i> Shared Bath
                        </span>
                    }
                </div>
                <div class="mb-2">
                    <small class="text-muted">
                        <i class="fas fa-expand-arrows-alt"></i> @Model.Allocation.Room.Size m²
                        <br><i class="fas fa-users"></i> Max @Model.Allocation.Room.MaxOccupancy guest(s)
                    </small>
                </div>
                @if (!string.IsNullOrEmpty(Model.Allocation.Room.Description))
                {
                    <div class="mt-3">
                        <small>
                            <strong>Room Description:</strong><br>
                            @Model.Allocation.Room.Description
                        </small>
                    </div>
                }
            </div>
        </div>
    </div>
</div>
