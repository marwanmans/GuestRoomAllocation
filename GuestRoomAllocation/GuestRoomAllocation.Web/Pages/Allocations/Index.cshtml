@page
@model AllocationsIndexModel
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@{
    ViewData["Title"] = "Room Allocations";
}

@section HeaderActions {
    <div class="btn-group me-2">
        <button type="button" class="btn btn-outline-primary @(Model.ViewMode == "calendar" ? "active" : "")"
                onclick="toggleView('calendar')">
            <i class="fas fa-calendar"></i> Calendar
        </button>
        <button type="button" class="btn btn-outline-primary @(Model.ViewMode == "list" ? "active" : "")"
                onclick="toggleView('list')">
            <i class="fas fa-list"></i> List
        </button>
    </div>
    <a href="/Allocations/Create" class="btn btn-primary">
        <i class="fas fa-plus"></i> New Allocation
    </a>
}

<!-- Filter Controls -->
<div class="row mb-3">
    <div class="col-md-3">
        <select id="apartmentFilter" class="form-select">
            <option value="">All Apartments</option>
            @foreach (var apartment in Model.Apartments)
            {
                <option value="@apartment.Id">@apartment.Name</option>
            }
        </select>
    </div>
    <div class="col-md-3">
        <select id="statusFilter" class="form-select">
            <option value="">All Allocations</option>
            <option value="current">Current</option>
            <option value="upcoming">Upcoming</option>
            <option value="past">Past</option>
        </select>
    </div>
    <div class="col-md-3">
        <input type="text" id="guestSearch" class="form-control" placeholder="Search by guest name...">
    </div>
    <div class="col-md-3" id="monthControls" style="display: @(Model.ViewMode == "calendar" ? "block" : "none")">
        <div class="d-flex">
            <select id="monthSelect" class="form-select me-1" onchange="changeMonth()">
                @for (int i = 1; i <= 12; i++)
                {
                    <option value="@i" selected="@(i == Model.CurrentMonth)">
                        @(new DateTime(2024, i, 1).ToString("MMM"))
                    </option>
                }
            </select>
            <select id="yearSelect" class="form-select" onchange="changeMonth()">
                @for (int year = DateTime.Now.Year - 1; year <= DateTime.Now.Year + 2; year++)
                {
                    <option value="@year" selected="@(year == Model.CurrentYear)">@year</option>
                }
            </select>
        </div>
    </div>
</div>

<!-- Calendar View -->
<div id="calendarView" style="display: @(Model.ViewMode == "calendar" ? "block" : "none")">
    <div class="card">
        <div class="card-header">
            <h5>@Model.CurrentMonthName @Model.CurrentYear - Room Allocations</h5>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered">
                    <thead>
                        <tr class="table-light">
                            <th style="width: 15%;">Room</th>
                            @for (int day = 1; day <= DateTime.DaysInMonth(Model.CurrentYear, Model.CurrentMonth); day++)
                            {
                                var date = new DateTime(Model.CurrentYear, Model.CurrentMonth, day);
                                <th class="text-center p-1" style="width: 3%;">
                                    <small>@day</small>
                                    <br><small class="text-muted">@date.ToString("ddd")[0]</small>
                                </th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var apartment in Model.Apartments)
                        {
                            <tr class="table-secondary">
                                <td colspan="32"><strong>@apartment.Name</strong></td>
                            </tr>
                            @foreach (var room in apartment.Rooms.OrderBy(r => r.RoomNumber))
                            {
                                <tr class="room-row" data-apartment="@apartment.Id">
                                    <td>
                                        <strong>@room.RoomNumber</strong>
                                        @if (room.HasPrivateBathroom)
                                        {
                                            <i class="fas fa-bath text-info" title="Private Bathroom"></i>
                                        }
                                        <br><small class="text-muted">@room.Size m²</small>
                                    </td>
                                    @for (int day = 1; day <= DateTime.DaysInMonth(Model.CurrentYear, Model.CurrentMonth); day++)
                                    {
                                        var currentDate = new DateTime(Model.CurrentYear, Model.CurrentMonth, day);
                                        var allocation = Model.GetAllocationForDate(room.Id, currentDate);
                                        var maintenance = Model.GetMaintenanceForDate(room.Id, currentDate);

                                        <td class="calendar-cell p-1 text-center" style="height: 60px; vertical-align: middle; position: relative;">
                                            @if (maintenance != null)
                                            {
                                                <div class="bg-danger text-white rounded p-1" style="font-size: 0.7em;"
                                                     title="@maintenance.Category: @maintenance.Description">
                                                    <i class="fas fa-tools"></i>
                                                </div>
                                            }
                                            else if (allocation != null)
                                            {
                                                <div class="bg-primary text-white rounded p-1" style="font-size: 0.7em;"
                                                     title="@allocation.Guest.FullName (@allocation.CheckInDate.ToString("MMM dd") - @allocation.CheckOutDate.ToString("MMM dd"))">
                                                    @allocation.Guest.FirstName[0]
                                                    @if (allocation.BathroomPreferenceOverride)
                                                    {
                                                        <i class="fas fa-exclamation-triangle" style="font-size: 0.6em;" title="Bathroom Override"></i>
                                                    }
                                                </div>
                                            }
                                        </td>
                                    }
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- List View -->
<div id="listView" style="display: @(Model.ViewMode == "list" ? "block" : "none")">
    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Guest</th>
                            <th>Apartment</th>
                            <th>Room</th>
                            <th>Check-in</th>
                            <th>Check-out</th>
                            <th>Duration</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="allocationTableBody">
                        @foreach (var allocation in Model.Allocations)
                        {
                            var status = Model.GetAllocationStatus(allocation);
                            var statusClass = status switch
                            {
                                "current" => "success",
                                "upcoming" => "info",
                                "past" => "secondary",
                                _ => "light"
                            };

                            <tr class="allocation-row"
                                data-guest="@allocation.Guest.FullName.ToLower()"
                                data-apartment="@allocation.Room.ApartmentId"
                                data-status="@status">
                                <td>
                                    <strong>@allocation.Guest.FullName</strong>
                                    @if (!string.IsNullOrEmpty(allocation.Guest.JobPosition))
                                    {
                                        <br>

                                        <small class="text-muted">@allocation.Guest.JobPosition</small>
                                    }
                                </td>
                                <td>@allocation.Room.Apartment.Name</td>
                                <td>
                                    @allocation.Room.RoomNumber
                                    @if (allocation.Room.HasPrivateBathroom)
                                    {
                                        <i class="fas fa-bath text-info" title="Private Bathroom"></i>
                                    }
                                    @if (allocation.BathroomPreferenceOverride)
                                    {
                                        <br>

                                        <span class="badge bg-warning">Override</span>
                                    }
                                </td>
                                <td>@allocation.CheckInDate.ToString("MMM dd, yyyy")</td>
                                <td>@allocation.CheckOutDate.ToString("MMM dd, yyyy")</td>
                                <td>@allocation.Duration days</td>
                                <td>
                                    <span class="badge bg-@statusClass">
                                        @status.ToUpper()
                                    </span>
                                </td>
                                <td>
                                    <div class="btn-group" role="group">
                                        <a href="/Allocations/Edit/@allocation.Id" class="btn btn-sm btn-outline-primary">
                                            <i class="fas fa-edit"></i>
                                        </a>
                                        @if (status != "past")
                                        {
                                            <a href="/Allocations/Delete/@allocation.Id" class="btn btn-sm btn-outline-danger">
                                                <i class="fas fa-trash"></i>
                                            </a>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function toggleView(view) {
            document.getElementById('calendarView').style.display = view === 'calendar' ? 'block' : 'none';
            document.getElementById('listView').style.display = view === 'list' ? 'block' : 'none';
            document.getElementById('monthControls').style.display = view === 'calendar' ? 'block' : 'none';

            // Update active button
            document.querySelectorAll('.btn-group .btn').forEach(btn => {
                btn.classList.remove('active');
            });
            event.target.classList.add('active');

            // Update URL
            const url = new URL(window.location);
            url.searchParams.set('view', view);
            window.history.replaceState({}, '', url);
        }

        function changeMonth() {
            const month = document.getElementById('monthSelect').value;
            const year = document.getElementById('yearSelect').value;
            const url = new URL(window.location);
            url.searchParams.set('month', month);
            url.searchParams.set('year', year);
            window.location.href = url;
        }

        // Filter functionality
        document.getElementById('apartmentFilter').addEventListener('change', filterAllocations);
        document.getElementById('statusFilter').addEventListener('change', filterAllocations);
        document.getElementById('guestSearch').addEventListener('input', filterAllocations);

        function filterAllocations() {
            const apartmentFilter = document.getElementById('apartmentFilter').value;
            const statusFilter = document.getElementById('statusFilter').value;
            const guestSearch = document.getElementById('guestSearch').value.toLowerCase();

            const rows = document.querySelectorAll('.allocation-row, .room-row');

            rows.forEach(row => {
                if (row.classList.contains('allocation-row')) {
                    const guestName = row.dataset.guest;
                    const apartmentId = row.dataset.apartment;
                    const status = row.dataset.status;

                    const guestMatch = !guestSearch || guestName.includes(guestSearch);
                    const apartmentMatch = !apartmentFilter || apartmentId === apartmentFilter;
                    const statusMatch = !statusFilter || status === statusFilter;

                    row.style.display = guestMatch && apartmentMatch && statusMatch ? '' : 'none';
                } else if (row.classList.contains('room-row')) {
                    const apartmentId = row.dataset.apartment;
                    const apartmentMatch = !apartmentFilter || apartmentId === apartmentFilter;
                    row.style.display = apartmentMatch ? '' : 'none';
                }
            });
        }

        // Initialize view on page load
        document.addEventListener('DOMContentLoaded', function() {
            const urlParams = new URLSearchParams(window.location.search);
            const view = urlParams.get('view') || 'list';
            const viewButton = document.querySelector(`[onclick="toggleView('${view}')"]`);
            if (viewButton) {
                viewButton.classList.add('active');
                toggleView(view);
            }
        });
    </script>
}
