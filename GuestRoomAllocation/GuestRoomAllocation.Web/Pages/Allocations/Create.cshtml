@page
@model CreateAllocationModel
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@{
    ViewData["Title"] = "Create New Allocation";
}

<div class="row">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h5>New Room Allocation</h5>
            </div>
            <div class="card-body">
                <form method="post" id="allocationForm">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="Allocation.GuestId" class="form-label">Guest *</label>
                                <select asp-for="Allocation.GuestId" class="form-select" required onchange="updateGuestInfo()">
                                    <option value="">Select Guest</option>
                                    @foreach (var guest in Model.Guests)
                                    {
                                        <option value="@guest.Id"
                                                data-name="@guest.FullName"
                                                data-email="@guest.Email"
                                                data-phone="@guest.Phone"
                                                data-job="@guest.JobPosition"
                                                selected="@(guest.Id == Model.Allocation.GuestId)">
                                            @guest.FullName @(!string.IsNullOrEmpty(guest.JobPosition) ? $"- {guest.JobPosition}" : "")
                                        </option>
                                    }
                                </select>
                                <span asp-validation-for="Allocation.GuestId" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="Allocation.RoomId" class="form-label">Room *</label>
                                <select asp-for="Allocation.RoomId" class="form-select" required onchange="updateRoomInfo()" id="roomSelect">
                                    <option value="">Select dates first to see available rooms...</option>
                                </select>
                                <span asp-validation-for="Allocation.RoomId" class="text-danger"></span>
                                <div id="roomLoadingIndicator" class="text-muted small mt-1" style="display: none;">
                                    <i class="fas fa-spinner fa-spin"></i> Checking room availability...
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="Allocation.CheckInDate" class="form-label">Check-in Date *</label>
                                <input asp-for="Allocation.CheckInDate" type="date" class="form-control"
                                       required onchange="handleDateChange();" id="checkInDate" />
                                <span asp-validation-for="Allocation.CheckInDate" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="Allocation.CheckOutDate" class="form-label">Check-out Date *</label>
                                <input asp-for="Allocation.CheckOutDate" type="date" class="form-control"
                                       required onchange="handleDateChange();" id="checkOutDate" />
                                <span asp-validation-for="Allocation.CheckOutDate" class="text-danger"></span>
                            </div>
                        </div>
                    </div>

                    <!-- Date Validation Alert -->
                    <div id="dateValidationAlert" class="alert alert-danger" style="display: none;">
                        <i class="fas fa-exclamation-triangle"></i>
                        <span id="dateValidationText"></span>
                    </div>

                    <!-- Room Availability Status -->
                    <div id="availabilityStatus" class="alert" style="display: none;">
                        <div class="d-flex align-items-center">
                            <i id="availabilityIcon" class="me-2"></i>
                            <div class="flex-grow-1">
                                <strong id="availabilityTitle"></strong>
                                <div id="availabilityDetails"></div>
                            </div>
                        </div>
                    </div>

                    <!-- Bathroom Preference Alert -->
                    <div id="bathroomAlert" class="alert alert-warning" style="display: none;">
                        <div class="d-flex align-items-center">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            <div class="flex-grow-1">
                                <strong>Bathroom Preference Notice:</strong>
                                <span id="bathroomAlertText"></span>
                            </div>
                            <div class="form-check">
                                <input asp-for="Allocation.BathroomPreferenceOverride" class="form-check-input" type="checkbox" />
                                <label asp-for="Allocation.BathroomPreferenceOverride" class="form-check-label">
                                    Override Preference
                                </label>
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label asp-for="Allocation.Notes" class="form-label">Notes</label>
                        <textarea asp-for="Allocation.Notes" class="form-control" rows="3"
                                  placeholder="Any special requirements or notes about this allocation"></textarea>
                        <span asp-validation-for="Allocation.Notes" class="text-danger"></span>
                    </div>

                    <div class="d-flex justify-content-between">
                        <a href="/Allocations" class="btn btn-secondary">
                            <i class="fas fa-arrow-left"></i> Back to Allocations
                        </a>
                        <button type="submit" class="btn btn-primary" id="submitBtn" disabled>
                            <i class="fas fa-save"></i> Create Allocation
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <!-- Guest Info Panel -->
        <div class="card mb-3" id="guestInfoPanel" style="display: none;">
            <div class="card-header">
                <h6><i class="fas fa-user"></i> Guest Information</h6>
            </div>
            <div class="card-body">
                <div id="guestDetails"></div>
            </div>
        </div>

        <!-- Room Info Panel -->
        <div class="card mb-3" id="roomInfoPanel" style="display: none;">
            <div class="card-header">
                <h6><i class="fas fa-bed"></i> Room Information</h6>
            </div>
            <div class="card-body">
                <div id="roomDetails"></div>
            </div>
        </div>

        <!-- Availability Summary -->
        <div class="card mb-3" id="availabilitySummary" style="display: none;">
            <div class="card-header">
                <h6><i class="fas fa-calendar-check"></i> Availability Summary</h6>
            </div>
            <div class="card-body">
                <div id="summaryDetails"></div>
            </div>
        </div>

        <!-- Bathroom Preference Guide -->
        <div class="card">
            <div class="card-header">
                <h6><i class="fas fa-info-circle"></i> Bathroom Preference Guide</h6>
            </div>
            <div class="card-body">
                <p><strong>System Priority:</strong></p>
                <ol>
                    <li>Rooms with private bathrooms</li>
                    <li>Maintain 1 guest per bathroom ratio</li>
                    <li>Minimize shared bathroom conflicts</li>
                </ol>

                <p><strong>Override Options:</strong></p>
                <ul>
                    <li>Check "Override Preference" to bypass bathroom logic</li>
                    <li>Use when guest-specific requirements exist</li>
                    <li>Document reasoning in notes</li>
                </ul>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        let availabilityData = null;
        let debounceTimer = null;

        function updateGuestInfo() {
            const select = document.getElementById('Allocation_GuestId');
            const panel = document.getElementById('guestInfoPanel');
            const details = document.getElementById('guestDetails');

            if (select.value) {
                const option = select.options[select.selectedIndex];
                const name = option.dataset.name;
                const email = option.dataset.email;
                const phone = option.dataset.phone;
                const job = option.dataset.job;

                details.innerHTML = `
                    <strong>${name}</strong><br>
                    <small class="text-muted">
                        📧 ${email}<br>
                        📞 ${phone}
                        ${job ? `<br>💼 ${job}` : ''}
                    </small>
                `;
                panel.style.display = 'block';
            } else {
                panel.style.display = 'none';
            }
        }

        async function updateRoomInfo() {
            const select = document.getElementById('roomSelect');
            const panel = document.getElementById('roomInfoPanel');
            const details = document.getElementById('roomDetails');

            if (select.value) {
                try {
                    // Get room details from the API
                    const checkIn = document.getElementById('checkInDate').value;
                    const checkOut = document.getElementById('checkOutDate').value;

                    let url = `/api/RoomAvailability/room-details/${select.value}`;
                    if (checkIn && checkOut) {
                        url += `?checkInDate=${checkIn}&checkOutDate=${checkOut}`;
                    }

                    const response = await fetch(url);
                    const data = await response.json();

                    if (response.ok && data.room) {
                        const room = data.room;
                        const apartment = room.apartment;

                        details.innerHTML = `
                            <strong>${apartment.name}</strong><br>
                            <small class="text-muted">${apartment.address}</small>
                            <div class="mt-2">
                                <span class="badge ${room.hasPrivateBathroom ? 'bg-success' : 'bg-secondary'}">
                                    ${room.hasPrivateBathroom ? 'Private Bathroom' : 'Shared Bathroom'}
                                </span><br>
                                <small class="text-muted">
                                    📐 ${room.size} m² | 👥 Max ${room.maxOccupancy}
                                    ${room.description ? `<br>📝 ${room.description}` : ''}
                                </small>
                            </div>
                        `;

                        // Show conflicts if any
                        if (data.conflicts && !data.conflicts.isAvailable) {
                            let conflictInfo = '<div class="mt-2 alert alert-warning py-2">';
                            if (data.conflicts.allocations.length > 0) {
                                conflictInfo += '<small>⚠️ Booking conflicts detected</small>';
                            }
                            if (data.conflicts.maintenance.length > 0) {
                                conflictInfo += '<small>🔧 Maintenance scheduled</small>';
                            }
                            conflictInfo += '</div>';
                            details.innerHTML += conflictInfo;
                        }

                        panel.style.display = 'block';
                        checkBathroomPreference(room);
                    }
                } catch (error) {
                    console.error('Error fetching room details:', error);
                    details.innerHTML = `
                        <div class="alert alert-danger py-2">
                            <small>Error loading room details</small>
                        </div>
                    `;
                    panel.style.display = 'block';
                }
            } else {
                panel.style.display = 'none';
            }
        }

        function handleDateChange() {
            // Clear previous timer
            if (debounceTimer) {
                clearTimeout(debounceTimer);
            }

            // Validate dates first
            if (!validateDates()) {
                return;
            }

            // Debounce the API call
            debounceTimer = setTimeout(() => {
                checkRoomAvailability();
            }, 500);
        }

        function validateDates() {
            const checkIn = document.getElementById('checkInDate').value;
            const checkOut = document.getElementById('checkOutDate').value;
            const alertDiv = document.getElementById('dateValidationAlert');
            const alertText = document.getElementById('dateValidationText');
            const submitBtn = document.getElementById('submitBtn');

            if (!checkIn || !checkOut) {
                alertDiv.style.display = 'none';
                submitBtn.disabled = true;
                return false;
            }

            const checkInDate = new Date(checkIn);
            const checkOutDate = new Date(checkOut);
            const today = new Date();
            today.setHours(0, 0, 0, 0);

            if (checkInDate >= checkOutDate) {
                alertText.textContent = 'Check-out date must be after check-in date.';
                alertDiv.style.display = 'block';
                submitBtn.disabled = true;
                return false;
            }

            if (checkInDate < today) {
                alertText.textContent = 'Check-in date cannot be in the past.';
                alertDiv.style.display = 'block';
                submitBtn.disabled = true;
                return false;
            }

            alertDiv.style.display = 'none';
            return true;
        }

        async function checkRoomAvailability() {
            const checkIn = document.getElementById('checkInDate').value;
            const checkOut = document.getElementById('checkOutDate').value;
            const roomSelect = document.getElementById('roomSelect');
            const loadingIndicator = document.getElementById('roomLoadingIndicator');
            const statusDiv = document.getElementById('availabilityStatus');
            const summaryPanel = document.getElementById('availabilitySummary');
            const summaryDetails = document.getElementById('summaryDetails');

            if (!checkIn || !checkOut) {
                roomSelect.innerHTML = '<option value="">Select dates first to see available rooms...</option>';
                statusDiv.style.display = 'none';
                summaryPanel.style.display = 'none';
                return;
            }

            try {
                loadingIndicator.style.display = 'block';
                roomSelect.disabled = true;

                const response = await fetch(`/api/RoomAvailability/check?checkInDate=${checkIn}&checkOutDate=${checkOut}`);
                const data = await response.json();

                if (response.ok) {
                    availabilityData = data;
                    updateRoomDropdown(data.availableRooms);
                    updateAvailabilityStatus(data);
                    updateSummary(data);
                } else {
                    throw new Error(data.error || 'Failed to check availability');
                }
            } catch (error) {
                console.error('Error checking availability:', error);
                roomSelect.innerHTML = '<option value="">Error loading rooms - please try again</option>';
                showAvailabilityStatus('error', 'Error', 'Failed to check room availability. Please try again.');
            } finally {
                loadingIndicator.style.display = 'none';
                roomSelect.disabled = false;
            }
        }

        function updateRoomDropdown(availableRooms) {
            const roomSelect = document.getElementById('roomSelect');
            const currentValue = roomSelect.value;

            roomSelect.innerHTML = '<option value="">Select a room...</option>';

            if (availableRooms.length === 0) {
                roomSelect.innerHTML = '<option value="">No rooms available for selected dates</option>';
                return;
            }

            availableRooms.forEach(apartment => {
                if (apartment.rooms.length > 0) {
                    const optgroup = document.createElement('optgroup');
                    optgroup.label = apartment.apartmentName;

                    apartment.rooms.forEach(room => {
                        const option = document.createElement('option');
                        option.value = room.id;
                        option.textContent = `${room.roomNumber} (${room.size}m² - ${room.hasPrivateBathroom ? 'Private' : 'Shared'} Bath)`;
                        option.dataset.apartment = apartment.apartmentName;
                        option.dataset.bathroom = room.hasPrivateBathroom;
                        option.dataset.size = room.size;
                        option.dataset.description = room.description || '';
                        option.dataset.roomNumber = room.roomNumber;

                        optgroup.appendChild(option);
                    });

                    roomSelect.appendChild(optgroup);
                }
            });

            // Restore previous selection if still available
            if (currentValue) {
                const option = roomSelect.querySelector(`option[value="${currentValue}"]`);
                if (option) {
                    roomSelect.value = currentValue;
                    updateRoomInfo();
                }
            }

            // Enable submit button if room is selected
            document.getElementById('submitBtn').disabled = !roomSelect.value;
        }

        function updateAvailabilityStatus(data) {
            const statusDiv = document.getElementById('availabilityStatus');
            const icon = document.getElementById('availabilityIcon');
            const title = document.getElementById('availabilityTitle');
            const details = document.getElementById('availabilityDetails');

            if (data.totalAvailable > 0) {
                showAvailabilityStatus('success', 'Rooms Available',
                    `${data.totalAvailable} room${data.totalAvailable > 1 ? 's' : ''} available for ${data.duration} day${data.duration > 1 ? 's' : ''}`);
            } else {
                showAvailabilityStatus('warning', 'No Rooms Available',
                    `No rooms are available for the selected dates (${data.duration} day${data.duration > 1 ? 's' : ''})`);
            }
        }

        function showAvailabilityStatus(type, titleText, detailsText) {
            const statusDiv = document.getElementById('availabilityStatus');
            const icon = document.getElementById('availabilityIcon');
            const title = document.getElementById('availabilityTitle');
            const details = document.getElementById('availabilityDetails');

            // Update classes and content based on type
            statusDiv.className = 'alert';
            if (type === 'success') {
                statusDiv.classList.add('alert-success');
                icon.className = 'fas fa-check-circle';
            } else if (type === 'warning') {
                statusDiv.classList.add('alert-warning');
                icon.className = 'fas fa-exclamation-triangle';
            } else if (type === 'error') {
                statusDiv.classList.add('alert-danger');
                icon.className = 'fas fa-exclamation-circle';
            }

            title.textContent = titleText;
            details.textContent = detailsText;
            statusDiv.style.display = 'block';
        }

        function updateSummary(data) {
            const summaryPanel = document.getElementById('availabilitySummary');
            const summaryDetails = document.getElementById('summaryDetails');

            const checkInDate = new Date(data.checkInDate);
            const checkOutDate = new Date(data.checkOutDate);

            summaryDetails.innerHTML = `
                <div class="row">
                    <div class="col-6">
                        <strong>Duration:</strong><br>
                        <span class="text-primary">${data.duration} day${data.duration > 1 ? 's' : ''}</span>
                    </div>
                    <div class="col-6">
                        <strong>Available:</strong><br>
                        <span class="text-success">${data.totalAvailable} room${data.totalAvailable > 1 ? 's' : ''}</span>
                    </div>
                </div>
                <hr>
                <small class="text-muted">
                    <strong>Check-in:</strong> ${checkInDate.toLocaleDateString()}<br>
                    <strong>Check-out:</strong> ${checkOutDate.toLocaleDateString()}
                </small>
            `;

            summaryPanel.style.display = 'block';
        }

        function checkBathroomPreference(room) {
            const alert = document.getElementById('bathroomAlert');
            const alertText = document.getElementById('bathroomAlertText');

            if (!room.hasPrivateBathroom) {
                alertText.textContent = 'This room has a shared bathroom. Consider checking bathroom availability with other guests during the selected period.';
                alert.style.display = 'block';
            } else {
                alert.style.display = 'none';
            }
        }

        // Event listeners
        document.getElementById('roomSelect').addEventListener('change', function() {
            const submitBtn = document.getElementById('submitBtn');
            submitBtn.disabled = !this.value;
            updateRoomInfo();
        });

        // Initialize form
        document.addEventListener('DOMContentLoaded', function() {
            updateGuestInfo();

            // If dates are pre-populated, check availability
            const checkIn = document.getElementById('checkInDate').value;
            const checkOut = document.getElementById('checkOutDate').value;
            if (checkIn && checkOut && validateDates()) {
                checkRoomAvailability();
            }
        });
    </script>
}