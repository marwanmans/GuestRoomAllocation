@page
@model MaintenanceIndexModel
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@{
    ViewData["Title"] = "Maintenance Management";
}

@section HeaderActions {
    <div class="btn-group me-2">
        <button type="button" class="btn btn-outline-primary @(Model.ViewMode == "active" ? "active" : "")"
                onclick="toggleView('active')">
            <i class="fas fa-tools"></i> Active
        </button>
        <button type="button" class="btn btn-outline-primary @(Model.ViewMode == "scheduled" ? "active" : "")"
                onclick="toggleView('scheduled')">
            <i class="fas fa-calendar-alt"></i> Scheduled
        </button>
        <button type="button" class="btn btn-outline-primary @(Model.ViewMode == "completed" ? "active" : "")"
                onclick="toggleView('completed')">
            <i class="fas fa-check-circle"></i> Completed
        </button>
        <button type="button" class="btn btn-outline-primary @(Model.ViewMode == "all" ? "active" : "")"
                onclick="toggleView('all')">
            <i class="fas fa-list"></i> All
        </button>
    </div>
    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createMaintenanceModal">
        <i class="fas fa-plus"></i> Schedule Maintenance
    </button>
}

<!-- Statistics Cards -->
<div class="row mb-4">
    <div class="col-md-3">
        <div class="card text-white bg-danger">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h4>@Model.ActiveCount</h4>
                        <p>Active Now</p>
                    </div>
                    <i class="fas fa-tools fa-2x"></i>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-white bg-warning">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h4>@Model.ScheduledCount</h4>
                        <p>Scheduled</p>
                    </div>
                    <i class="fas fa-calendar-alt fa-2x"></i>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-white bg-success">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h4>@Model.CompletedThisMonth</h4>
                        <p>This Month</p>
                    </div>
                    <i class="fas fa-check-circle fa-2x"></i>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-white bg-info">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h4>@Model.RoomsInMaintenance</h4>
                        <p>Rooms Affected</p>
                    </div>
                    <i class="fas fa-bed fa-2x"></i>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Filter Controls -->
<div class="row mb-3">
    <div class="col-md-3">
        <select id="apartmentFilter" class="form-select">
            <option value="">All Apartments</option>
            @foreach (var apartment in Model.Apartments)
            {
                <option value="@apartment.Id">@apartment.Name</option>
            }
        </select>
    </div>
    <div class="col-md-3">
        <select id="categoryFilter" class="form-select">
            <option value="">All Categories</option>
            @foreach (var category in Enum.GetValues<MaintenanceCategory>())
            {
                <option value="@((int)category)">@category</option>
            }
        </select>
    </div>
    <div class="col-md-3">
        <input type="text" id="searchFilter" class="form-control" placeholder="Search description...">
    </div>
    <div class="col-md-3">
        <select id="priorityFilter" class="form-select">
            <option value="">All Priorities</option>
            <option value="urgent">Urgent (Today)</option>
            <option value="soon">Due Soon (This Week)</option>
            <option value="overdue">Overdue</option>
        </select>
    </div>
</div>

<!-- Maintenance List -->
<div class="card">
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Location</th>
                        <th>Category</th>
                        <th>Description</th>
                        <th>Period</th>
                        <th>Duration</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="maintenanceTableBody">
                    @foreach (var maintenance in Model.MaintenancePeriods)
                    {
                        var status = Model.GetMaintenanceStatus(maintenance);
                        var statusClass = status switch
                        {
                            "active" => "danger",
                            "scheduled" => "warning",
                            "overdue" => "dark",
                            "completed" => "success",
                            _ => "secondary"
                        };
                        var priority = Model.GetMaintenancePriority(maintenance);

                        <tr class="maintenance-row"
                            data-apartment="@(maintenance.ApartmentId ?? maintenance.Room?.ApartmentId ?? 0)"
                            data-category="@((int)maintenance.Category)"
                            data-description="@maintenance.Description.ToLower()"
                            data-status="@status"
                            data-priority="@priority">
                            <td>
                                @if (maintenance.ApartmentId.HasValue)
                                {
                                    <strong>@maintenance.Apartment?.Name</strong>
                                    <br>

                                    <small class="text-muted">Entire Apartment</small>
                                }
                                else
                                {
                                    <strong>@maintenance.Room?.Apartment?.Name</strong>
                                    <br>

                                    <small class="text-muted">Room @maintenance.Room?.RoomNumber</small>
                                }
                            </td>
                            <td>
                                <span class="badge bg-@GetCategoryColor(maintenance.Category)">
                                    @maintenance.Category
                                </span>
                                @if (priority == "urgent")
                                {
                                    <br>

                                    <span class="badge bg-danger">URGENT</span>
                                }
                                else if (priority == "overdue")
                                {
                                    <br>

                                    <span class="badge bg-dark">OVERDUE</span>
                                }
                                else if (priority == "soon")
                                {
                                    <br>

                                    <span class="badge bg-warning">SOON</span>
                                }
                            </td>
                            <td>
                                <strong>@maintenance.Description</strong>
                                @if (!string.IsNullOrEmpty(maintenance.Notes))
                                {
                                    <br>

                                    <small class="text-muted">@maintenance.Notes</small>
                                }
                            </td>
                            <td>
                                <div>
                                    <strong>Start:</strong> @maintenance.StartDate.ToString("MMM dd, yyyy")
                                    <br><strong>End:</strong> @maintenance.EndDate.ToString("MMM dd, yyyy")
                                </div>
                            </td>
                            <td>
                                <span class="badge bg-info">@maintenance.Duration day@(maintenance.Duration > 1 ? "s" : "")</span>
                            </td>
                            <td>
                                <span class="badge bg-@statusClass">@status.ToUpper()</span>
                                @if (status == "active")
                                {
                                    var remainingDays = (maintenance.EndDate - DateTime.Today).Days;
                                    <br>

                                    <small class="text-muted">
                                        @if (remainingDays > 0)
                                        {
                                            @($"{remainingDays} day{(remainingDays > 1 ? "s" : "")} remaining")
                                        }
                                        else if (remainingDays == 0)
                                        {
                                            @("Ends today")
                                        }
                                        else
                                        {
                                            @($"Overdue by {Math.Abs(remainingDays)} day{(Math.Abs(remainingDays) > 1 ? "s" : "")}")
                                        }
                                    </small>
                                }
                                else if (status == "scheduled")
                                {
                                    var daysToStart = (maintenance.StartDate - DateTime.Today).Days;
                                    <br>

                                    <small class="text-muted">
                                        @if (daysToStart == 0)
                                        {
                                            @("Starts today")
                                        }
                                        else if (daysToStart > 0)
                                        {
                                            @($"Starts in {daysToStart} day{(daysToStart > 1 ? "s" : "")}")
                                        }
                                    </small>
                                }
                            </td>
                            <td>
                                <div class="btn-group" role="group">
                                    <a href="/Maintenance/Edit/@maintenance.Id" class="btn btn-sm btn-outline-primary">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                    @if (status != "completed")
                                    {
                                        <form method="post" asp-page-handler="Complete" class="d-inline">
                                            <input type="hidden" name="id" value="@maintenance.Id" />
                                            <button type="submit" class="btn btn-sm btn-outline-success"
                                                    onclick="return confirm('Mark @maintenance.Description as completed?')">
                                                <i class="fas fa-check"></i>
                                            </button>
                                        </form>
                                    }
                                    <a href="/Maintenance/Delete/@maintenance.Id" class="btn btn-sm btn-outline-danger">
                                        <i class="fas fa-trash"></i>
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        @if (!Model.MaintenancePeriods.Any())
        {
            <div class="text-center py-5">
                <i class="fas fa-tools fa-3x text-muted mb-3"></i>
                <h4>No Maintenance Periods</h4>
                <p class="text-muted">No maintenance periods match your current filter criteria.</p>
                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createMaintenanceModal">
                    <i class="fas fa-plus"></i> Schedule First Maintenance
                </button>
            </div>
        }
    </div>
</div>

<!-- Create Maintenance Modal -->
<div class="modal fade" id="createMaintenanceModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Schedule New Maintenance</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form method="post" asp-page-handler="Create">
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Location Type *</label>
                                <select name="LocationType" class="form-select" required onchange="toggleLocationOptions()">
                                    <option value="">Select Location Type</option>
                                    <option value="apartment">Entire Apartment</option>
                                    <option value="room">Specific Room</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Category *</label>
                                <select name="Category" class="form-select" required>
                                    <option value="">Select Category</option>
                                    @foreach (var category in Enum.GetValues<MaintenanceCategory>())
                                    {
                                        <option value="@((int)category)">@category</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6" id="apartmentSelection" style="display: none;">
                            <div class="mb-3">
                                <label class="form-label">Apartment</label>
                                <select name="ApartmentId" class="form-select">
                                    <option value="">Select Apartment</option>
                                    @foreach (var apartment in Model.Apartments)
                                    {
                                        <option value="@apartment.Id">@apartment.Name</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6" id="roomSelection" style="display: none;">
                            <div class="mb-3">
                                <label class="form-label">Room</label>
                                <select name="RoomId" class="form-select">
                                    <option value="">Select Room</option>
                                    @foreach (var apartment in Model.Apartments)
                                    {
                                        <optgroup label="@apartment.Name">
                                            @foreach (var room in apartment.Rooms)
                                            {
                                                <option value="@room.Id">@room.RoomNumber</option>
                                            }
                                        </optgroup>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Start Date *</label>
                                <input type="date" name="StartDate" class="form-control" required
                                       value="@DateTime.Today.ToString("yyyy-MM-dd")" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">End Date *</label>
                                <input type="date" name="EndDate" class="form-control" required
                                       value="@DateTime.Today.AddDays(1).ToString("yyyy-MM-dd")" />
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Description *</label>
                        <input type="text" name="Description" class="form-control" required
                               placeholder="Brief description of maintenance work" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Notes</label>
                        <textarea name="Notes" class="form-control" rows="3"
                                  placeholder="Additional details, contractor info, special instructions..."></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Schedule Maintenance</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function toggleView(view) {
            // Update active button
            document.querySelectorAll('.btn-group .btn').forEach(btn => {
                btn.classList.remove('active');
            });
            event.target.classList.add('active');

            // Filter rows
            filterMaintenance();

            // Update URL
            const url = new URL(window.location);
            url.searchParams.set('view', view);
            window.history.replaceState({}, '', url);
        }

        function filterMaintenance() {
            const viewMode = document.querySelector('.btn-group .btn.active').textContent.trim().toLowerCase();
            const apartmentFilter = document.getElementById('apartmentFilter').value;
            const categoryFilter = document.getElementById('categoryFilter').value;
            const searchFilter = document.getElementById('searchFilter').value.toLowerCase();
            const priorityFilter = document.getElementById('priorityFilter').value;

            const rows = document.querySelectorAll('.maintenance-row');

            rows.forEach(row => {
                const status = row.dataset.status;
                const apartment = row.dataset.apartment;
                const category = row.dataset.category;
                const description = row.dataset.description;
                const priority = row.dataset.priority;

                let show = true;

                // View mode filter
                if (viewMode !== 'all') {
                    show = show && status === viewMode;
                }

                // Apartment filter
                if (apartmentFilter) {
                    show = show && apartment === apartmentFilter;
                }

                // Category filter
                if (categoryFilter) {
                    show = show && category === categoryFilter;
                }

                // Search filter
                if (searchFilter) {
                    show = show && description.includes(searchFilter);
                }

                // Priority filter
                if (priorityFilter) {
                    show = show && priority === priorityFilter;
                }

                row.style.display = show ? '' : 'none';
            });
        }

        function toggleLocationOptions() {
            const locationType = document.querySelector('select[name="LocationType"]').value;
            const apartmentDiv = document.getElementById('apartmentSelection');
            const roomDiv = document.getElementById('roomSelection');

            if (locationType === 'apartment') {
                apartmentDiv.style.display = 'block';
                roomDiv.style.display = 'none';
                document.querySelector('select[name="RoomId"]').value = '';
            } else if (locationType === 'room') {
                apartmentDiv.style.display = 'none';
                roomDiv.style.display = 'block';
                document.querySelector('select[name="ApartmentId"]').value = '';
            } else {
                apartmentDiv.style.display = 'none';
                roomDiv.style.display = 'none';
            }
        }

        // Event listeners
        document.getElementById('apartmentFilter').addEventListener('change', filterMaintenance);
        document.getElementById('categoryFilter').addEventListener('change', filterMaintenance);
        document.getElementById('searchFilter').addEventListener('input', filterMaintenance);
        document.getElementById('priorityFilter').addEventListener('change', filterMaintenance);

        // Initialize view
        document.addEventListener('DOMContentLoaded', function() {
            const urlParams = new URLSearchParams(window.location.search);
            const view = urlParams.get('view') || 'active';
            const button = Array.from(document.querySelectorAll('.btn-group .btn'))
                .find(btn => btn.textContent.trim().toLowerCase() === view);
            if (button) {
                button.classList.add('active');
                filterMaintenance();
            }
        });
    </script>
}

@functions {
    private string GetCategoryColor(MaintenanceCategory category)
    {
        return category switch
        {
            MaintenanceCategory.Cleaning => "info",
            MaintenanceCategory.Repairs => "warning",
            MaintenanceCategory.Inspection => "primary",
            MaintenanceCategory.Renovation => "purple",
            MaintenanceCategory.PestControl => "danger",
            MaintenanceCategory.Painting => "success",
            MaintenanceCategory.PlumbingWork => "info",
            MaintenanceCategory.ElectricalWork => "warning",
            _ => "secondary"
        };
    }
}